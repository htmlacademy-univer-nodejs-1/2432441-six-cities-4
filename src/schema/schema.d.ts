/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/offers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list of rental offers
         * @description Returns a list of rental offers with pagination
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of offers to return */
                    limit?: number;
                    /** @description Number of offers to skip */
                    skip?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of offers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Offer"][];
                    };
                };
            };
        };
        put?: never;
        /** Create new offer */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateOfferRequest"];
                };
            };
            responses: {
                /** @description Offer created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Offer"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers/{offerId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                offerId: string;
            };
            cookie?: never;
        };
        /** Get offer details */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    offerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Offer details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Offer"];
                    };
                };
                /** @description Offer not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Delete offer */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    offerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Offer deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Offer not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update offer */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    offerId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateOfferRequest"];
                };
            };
            responses: {
                /** @description Offer updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Offer"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Offer not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/offers/{offerId}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                offerId: string;
            };
            cookie?: never;
        };
        /** Get offer comments */
        get: {
            parameters: {
                query?: {
                    /** @description Number of comments to return */
                    limit?: number;
                    /** @description Number of comments to skip */
                    skip?: number;
                };
                header?: never;
                path: {
                    offerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of comments */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Comment"][];
                    };
                };
                /** @description Offer not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        /** Add comment to offer */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    offerId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateCommentRequest"];
                };
            };
            responses: {
                /** @description Comment added successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Comment"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Offer not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateUserRequest"];
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Email already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** User login */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginResponse"];
                    };
                };
                /** @description Invalid credentials */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check user authentication status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User is authenticated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload user avatar */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        avatar?: string;
                    };
                };
            };
            responses: {
                /** @description Avatar uploaded successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers/premium/{city}": {
        parameters: {
            query?: {
                /** @description Number of premium offers to return (maximum 3) */
                limit?: number;
            };
            header?: never;
            path: {
                city: "Paris" | "Cologne" | "Brussels" | "Amsterdam" | "Hamburg" | "Dusseldorf";
            };
            cookie?: never;
        };
        /**
         * Get premium offers for city
         * @description Returns up to 3 premium offers for the specified city
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of premium offers to return (maximum 3) */
                    limit?: number;
                };
                header?: never;
                path: {
                    city: "Paris" | "Cologne" | "Brussels" | "Amsterdam" | "Hamburg" | "Dusseldorf";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of premium offers (maximum 3) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Offer"][];
                    };
                };
                /** @description Invalid city or limit */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's favorite offers */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of favorite offers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Offer"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/favorites/{offerId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                offerId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add offer to favorites */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    offerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Offer added to favorites */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Offer"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Offer not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        /** Remove offer from favorites */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    offerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Offer removed from favorites */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Offer"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Offer not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LoginResponse: {
            /** @description JWT token for authentication */
            token: string;
        };
        User: {
            /** @description Unique identifier of the user */
            id?: string;
            /** @description User's name */
            name: string;
            /**
             * Format: email
             * @description User's email (must be unique)
             */
            email: string;
            /**
             * Format: uri
             * @description URL to user's avatar image (jpg or png)
             */
            avatar?: string;
            /**
             * @description User type
             * @enum {string}
             */
            type: "regular" | "pro";
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        CreateUserRequest: {
            /** @description User's name */
            name: string;
            /**
             * Format: email
             * @description User's email (must be unique)
             */
            email: string;
            /** @description User's password */
            password: string;
        };
        LoginRequest: {
            /**
             * Format: email
             * @description User's email
             */
            email: string;
            /** @description User's password */
            password: string;
        };
        Location: {
            /**
             * Format: float
             * @description Latitude coordinate
             */
            latitude: number;
            /**
             * Format: float
             * @description Longitude coordinate
             */
            longitude: number;
        };
        /** @example {
         *       "id": "507f1f77bcf86cd799439011",
         *       "title": "Уютная квартира в центре города",
         *       "description": "Уютная квартира в самом центре города, идеально подходит для пар или небольших семей.",
         *       "publicationDate": "2023-10-01T00:00:00.000Z",
         *       "city": "Paris",
         *       "previewImage": "https://example.com/image1.jpg",
         *       "images": [
         *         "https://example.com/image1_1.jpg",
         *         "https://example.com/image1_2.jpg",
         *         "https://example.com/image1_3.jpg",
         *         "https://example.com/image1_4.jpg",
         *         "https://example.com/image1_5.jpg",
         *         "https://example.com/image1_6.jpg"
         *       ],
         *       "isPremium": true,
         *       "isFavorite": false,
         *       "rating": 4.5,
         *       "type": "apartment",
         *       "bedrooms": 2,
         *       "maxGuests": 4,
         *       "price": 12000,
         *       "amenities": [
         *         "Air conditioning",
         *         "Laptop friendly workspace",
         *         "Fridge"
         *       ],
         *       "author": {
         *         "id": "507f1f77bcf86cd799439012",
         *         "name": "John Doe",
         *         "email": "john@example.com",
         *         "avatar": "https://example.com/avatar.jpg",
         *         "type": "regular"
         *       },
         *       "commentsCount": 5,
         *       "coordinates": {
         *         "latitude": 48.8566,
         *         "longitude": 2.3522
         *       },
         *       "createdAt": "2024-10-01T00:00:00.000Z",
         *       "updatedAt": "2024-10-01T00:00:00.000Z"
         *     } */
        Offer: {
            /** @description Unique identifier of the offer */
            id?: string;
            /** @description Offer title */
            title: string;
            /** @description Offer description */
            description: string;
            /**
             * Format: date-time
             * @description Publication date
             */
            publicationDate?: string;
            /**
             * @description City where the offer is located
             * @enum {string}
             */
            city: "Paris" | "Cologne" | "Brussels" | "Amsterdam" | "Hamburg" | "Dusseldorf";
            /**
             * Format: uri
             * @description URL to preview image
             */
            previewImage: string;
            /** @description List of 6 image URLs */
            images: string[];
            /** @description Premium status flag */
            isPremium: boolean;
            /** @description Favorite status flag */
            isFavorite: boolean;
            /**
             * Format: float
             * @description Rating from 1 to 5 (1 decimal place)
             */
            rating: number;
            /**
             * @description Housing type
             * @enum {string}
             */
            type: "apartment" | "house" | "room" | "hotel";
            /** @description Number of bedrooms */
            bedrooms: number;
            /** @description Maximum number of guests */
            maxGuests: number;
            /** @description Rental price */
            price: number;
            /** @description List of amenities */
            amenities: ("Breakfast" | "Air conditioning" | "Laptop friendly workspace" | "Baby seat" | "Washer" | "Towels" | "Fridge")[];
            author: components["schemas"]["User"];
            /** @description Number of comments */
            commentsCount?: number;
            /** @description Exact location coordinates of the offer */
            coordinates: components["schemas"]["Location"];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        CreateOfferRequest: {
            /** @description Offer title */
            title: string;
            /** @description Offer description */
            description: string;
            /**
             * @description City where the offer is located
             * @enum {string}
             */
            city: "Paris" | "Cologne" | "Brussels" | "Amsterdam" | "Hamburg" | "Dusseldorf";
            /**
             * Format: uri
             * @description URL to preview image
             */
            previewImage: string;
            /** @description List of 6 image URLs */
            images: string[];
            /** @description Premium status flag */
            isPremium: boolean;
            /**
             * @description Housing type
             * @enum {string}
             */
            type: "apartment" | "house" | "room" | "hotel";
            /** @description Number of bedrooms */
            bedrooms: number;
            /** @description Maximum number of guests */
            maxGuests: number;
            /** @description Rental price */
            price: number;
            /** @description List of amenities */
            amenities: ("Breakfast" | "Air conditioning" | "Laptop friendly workspace" | "Baby seat" | "Washer" | "Towels" | "Fridge")[];
            /** @description Exact location coordinates of the offer */
            coordinates: components["schemas"]["Location"];
        };
        UpdateOfferRequest: {
            /** @description Offer title */
            title?: string;
            /** @description Offer description */
            description?: string;
            /**
             * @description City where the offer is located
             * @enum {string}
             */
            city?: "Paris" | "Cologne" | "Brussels" | "Amsterdam" | "Hamburg" | "Dusseldorf";
            /**
             * Format: uri
             * @description URL to preview image
             */
            previewImage?: string;
            /** @description List of 6 image URLs */
            images?: string[];
            /** @description Premium status flag */
            isPremium?: boolean;
            /**
             * @description Housing type
             * @enum {string}
             */
            type?: "apartment" | "house" | "room" | "hotel";
            /** @description Number of bedrooms */
            bedrooms?: number;
            /** @description Maximum number of guests */
            maxGuests?: number;
            /** @description Rental price */
            price?: number;
            /** @description List of amenities */
            amenities?: ("Breakfast" | "Air conditioning" | "Laptop friendly workspace" | "Baby seat" | "Washer" | "Towels" | "Fridge")[];
            /** @description Exact location coordinates of the offer */
            coordinates?: components["schemas"]["Location"];
        };
        Comment: {
            /** @description Unique identifier of the comment */
            id?: string;
            /** @description Comment text */
            text: string;
            /** @description Rating from 1 to 5 */
            rating: number;
            author: components["schemas"]["User"];
            /** Format: date-time */
            createdAt?: string;
        };
        CreateCommentRequest: {
            /** @description Comment text */
            text: string;
            /** @description Rating from 1 to 5 */
            rating: number;
        };
        Error: {
            /** @description Error message */
            error: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type LoginResponse = components['schemas']['LoginResponse'];
export type User = components['schemas']['User'];
export type CreateUserRequest = components['schemas']['CreateUserRequest'];
export type LoginRequest = components['schemas']['LoginRequest'];
export type Location = components['schemas']['Location'];
export type Offer = components['schemas']['Offer'];
export type CreateOfferRequest = components['schemas']['CreateOfferRequest'];
export type UpdateOfferRequest = components['schemas']['UpdateOfferRequest'];
export type Comment = components['schemas']['Comment'];
export type CreateCommentRequest = components['schemas']['CreateCommentRequest'];
export type Error = components['schemas']['Error'];
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
